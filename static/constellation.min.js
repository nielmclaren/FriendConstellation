function h(a) {
    throw a;
}
var k = !0,
    l = null,
    n = !1;

function o() {
    return function () {}
}
function q(a) {
    return function () {
        return this[a]
    }
};
Node = function (a, b) {
    this.id = a;
    this.data = b ? b : {};
    this.edges = []
};
window.Node = Node;
Node.prototype.pa = function () {
    for (var a = [], b = 0; b < this.edges.length; b++) this.edges[b].tailNode.id == this.id ? a.push(this.edges[b].headNode) : a.push(this.edges[b].tailNode);
    return a
};
Node.prototype.getNeighborNodes = Node.prototype.pa;
Node.prototype.ib = function () {
    for (var a = [], b = 0; b < this.edges.length; b++) this.edges[b].tailNode.id == this.id ? a.push([this.edges[b], this.edges[b].headNode]) : a.push([this.edges[b], this.edges[b].tailNode]);
    return a
};
Node.prototype.getNeighborEdgeNodePairs = Node.prototype.ib;
Edge = function (a, b, c, d) {
    this.id = a;
    this.tailNode = b;
    this.headNode = c;
    this.data = d ? d : {}
};
window.Edge = Edge;
Edge.prototype.jb = function (a) {
    return a == this.tailNode.id ? this.headNode : a == this.headNode.id ? this.tailNode : l
};
Edge.prototype.getOtherNode = Edge.prototype.jb;
Graph = function () {
    this.d = [];
    this.c = []
};
window.Graph = Graph;
Graph.prototype.A = function (a, b) {
    this.i(a) && h("Failed to add node. Node already exists.");
    var c = new Node(a, b);
    this.d.push(c);
    return c
};
Graph.prototype.addNode = Graph.prototype.A;
Graph.prototype.i = function (a) {
    for (var b = 0; b < this.d.length; b++) if (this.d[b].id == a) return this.d[b];
    return l
};
Graph.prototype.getNode = Graph.prototype.i;
Graph.prototype.I = function () {
    return this.d.concat()
};
Graph.prototype.getNodes = Graph.prototype.I;
Graph.prototype.U = function () {
    return this.d.map(function (a) {
        return a.id
    })
};
Graph.prototype.getNodeIds = Graph.prototype.U;
Graph.prototype.ra = function () {
    return this.d.length
};
Graph.prototype.getNodeLength = Graph.prototype.ra;
Graph.prototype.removeNode = function (a) {
    for (var b = 0; b < this.d.length; b++) if (this.d[b].id == a) {
        this.d.splice(b, 1);
        return
    }
    h("Failed to remove node. Node does not exist.")
};
Graph.prototype.removeNode = Graph.prototype.removeNode;
Graph.prototype.Da = function (a, b) {
    var c = this.i(a);
    c ? c.data = b : h("Failed to update node. Node does not exist.");
    return c
};
Graph.prototype.updateNode = Graph.prototype.Da;
Graph.prototype.Fa = function (a, b, c, d) {
    var c = 2 < arguments.length ? c : n,
        d = 3 < arguments.length ? d : n,
        e = this.i(a);
    e ? e.data = c ? jQuery.extend(d, e.data, b) : b : e = this.A(a, b);
    return e
};
Graph.prototype.upsertNode = Graph.prototype.Fa;
Graph.prototype.z = function (a, b, c, d) {
    this.o(a) && h("Failed to add edge. Edge already exists.");
    (b = this.i(b)) || h("Failed to add edge. Tail node does not exist.");
    (c = this.i(c)) || h("Failed to add edge. Head node does not exist.");
    a = new Edge(a, b, c, d);
    this.c.push(a);
    b.edges.push(a);
    c.edges.push(a);
    return a
};
Graph.prototype.addEdge = Graph.prototype.z;
Graph.prototype.o = function (a) {
    for (var b = 0; b < this.c.length; b++) if (this.c[b].id == a) return this.c[b];
    return l
};
Graph.prototype.getEdge = Graph.prototype.o;
Graph.prototype.T = function () {
    return this.c.map(function (a) {
        return a.id
    })
};
Graph.prototype.getEdgeIds = Graph.prototype.T;
Graph.prototype.aa = function () {
    return this.c.concat()
};
Graph.prototype.getEdges = Graph.prototype.aa;
Graph.prototype.oa = function () {
    return this.c.length
};
Graph.prototype.getEdgeLength = Graph.prototype.oa;
Graph.prototype.X = function (a) {
    var b, c = l;
    for (b = 0; b < this.c.length; b++) if (this.c[b].id == a) {
        c = this.c[b];
        this.c.splice(b, 1);
        break
    }
    if (c) {
        for (b = 0; b < c.tailNode.edges.length; b++) if (c.tailNode.edges[b].id == a) {
            c.tailNode.edges.splice(b, 1);
            break
        }
        for (b = 0; b < c.headNode.edges.length; b++) if (c.headNode.edges[b].id == a) {
            c.headNode.edges.splice(b, 1);
            break
        }
    } else h("Failed to remove edge. Edge does not exist.")
};
Graph.prototype.removeEdge = Graph.prototype.X;
Graph.prototype.Ca = function (a, b) {
    var c = this.o(a);
    c ? c.data = b : h("Failed to update edge. Edge does not exist.");
    return c
};
Graph.prototype.updateEdge = Graph.prototype.Ca;
Graph.prototype.Ea = function (a, b, c, d, e, f) {
    var e = 4 < arguments.length ? e : n,
        f = 5 < arguments.length ? f : n,
        g = this.o(a);
    g ? g.data = e ? jQuery.extend(f, g.data, d) : d : g = this.z(a, b, c, d);
    return g
};
Graph.prototype.upsertEdge = Graph.prototype.Ea;
GraphLoader = function (a) {
    0 >= arguments.length || (this.config = a, this.parser = this.constellation = l)
};
window.GraphLoader = GraphLoader;
GraphLoader.prototype.S = q("constellation");
GraphLoader.prototype.getConstellation = GraphLoader.prototype.S;
GraphLoader.prototype.e = function (a) {
    this.constellation = a
};
GraphLoader.prototype.setConstellation = GraphLoader.prototype.e;
GraphLoader.prototype.kb = q("parser");
GraphLoader.prototype.getParser = GraphLoader.prototype.kb;
GraphLoader.prototype.rb = function (a) {
    this.parser = a
};
GraphLoader.prototype.setParser = GraphLoader.prototype.rb;
SimpleGraphLoader = function (a) {
    0 >= arguments.length || GraphLoader.call(this, a)
};
window.SimpleGraphLoader = SimpleGraphLoader;
SimpleGraphLoader.prototype = new GraphLoader;
SimpleGraphLoader.prototype.e = function (a) {
    this.constellation && jQuery(this.constellation).unbind("initialized");
    GraphLoader.prototype.e.call(this, a);
    this.constellation && jQuery(this.constellation).bind("initialized", {
        context: this
    }, function (a) {
        a = a.data.context;
        a.config.url && a.load(a.config.url)
    })
};
SimpleGraphLoader.prototype.setConstellation = SimpleGraphLoader.prototype.e;
SimpleGraphLoader.prototype.load = function (a) {
    this.parser || h("Graph loading halted. No parser has been set.");
    jQuery.ajax({
        url: a,
        context: this,
        success: function (a) {
            this.parser.parse(a)
        }
    })
};
SimpleGraphLoader.prototype.load = SimpleGraphLoader.prototype.load;
TreeGraphLoader = function (a) {
    0 >= arguments.length || GraphLoader.call(this, a)
};
window.TreeGraphLoader = TreeGraphLoader;
TreeGraphLoader.prototype = new GraphLoader;
TreeGraphLoader.prototype.e = function (a) {
    GraphLoader.prototype.e.call(this, a);
    jQuery(this.constellation).bind("selectedNode", o())
};
GraphParser = function (a) {
    0 >= arguments.length || (this.config = a, this.graph = l)
};
window.GraphParser = GraphParser;
GraphParser.prototype.bb = q("graph");
GraphParser.prototype.getGraph = GraphParser.prototype.bb;
GraphParser.prototype.qb = function (a) {
    this.graph = a
};
GraphParser.prototype.setGraph = GraphParser.prototype.qb;
GraphParser.prototype.parse = o();
GraphParser.prototype.parse = GraphParser.prototype.parse;
RoamerGraphParser = function (a) {
    0 >= arguments.length || GraphParser.call(this, a)
};
window.RoamerGraphParser = RoamerGraphParser;
RoamerGraphParser.prototype = new GraphParser;
RoamerGraphParser.prototype.parse = function (a) {
    a instanceof jQuery || (a = jQuery(a));
    var b = this.graph;
    a.find("node").each(function (a, d) {
        var d = jQuery(d),
            e = {};
        jQuery.each(this.attributes, function (a, b) {
            e[b.name] = b.value
        });
        b.A(d.attr("id"), e)
    });
    a.find("edge").each(function (a, d) {
        var d = jQuery(d),
            e = {};
        jQuery.each(this.attributes, function (a, b) {
            e[b.name] = b.value
        });
        b.z(d.attr("id"), d.attr("tail_node_id"), d.attr("head_node_id"), e)
    });
    jQuery(this).trigger("complete")
};
RoamerGraphParser.prototype.parse = RoamerGraphParser.prototype.parse;
GraphMlParser = function (a) {
    0 >= arguments.length || GraphParser.call(this, a)
};
window.GraphMlParser = GraphMlParser;
GraphMlParser.prototype = new GraphParser;
GraphMlParser.prototype.parse = function (a) {
    a instanceof jQuery || (a = jQuery(a));
    var b = this.graph,
        c = {};
    a.find('key[for="node"]').each(function (a, b) {
        b = jQuery(b);
        c[b.attr("id")] = b
    });
    var d = {};
    a.find('key[for="edge"]').each(function (a, b) {
        b = jQuery(b);
        d[b.attr("id")] = b
    });
    a.find("node").each(function (a, d) {
        var d = jQuery(d),
            g = {},
            i;
        for (i in c) {
            var j = c[i].attr("attr.name").replace(/[^a-zA-Z0-9]/g, "_"),
                m = d.find('data[key="' + i + '"]');
            0 < m.length && (g[j] = m.text())
        }
        b.A(d.attr("id"), g)
    });
    a.find("edge").each(function (a, c) {
        var c = jQuery(c),
            g = {},
            i;
        for (i in d) {
            var j = d[i].attr("attr.name").replace(/[^a-zA-Z0-9]/g, "_"),
                m = c.find('data[key="' + i + '"]');
            0 < m.length && (g[j] = m.text())
        }
        b.z(c.attr("source") + ":" + c.attr("target"), c.attr("source"), c.attr("target"), g)
    });
    jQuery(this).trigger("complete")
};
GraphMlParser.prototype.parse = GraphMlParser.prototype.parse;
GraphView = function (a) {
    0 >= arguments.length || (this.config = a, this.result = this.source = this.constellation = l, this.Ga = k)
};
window.GraphView = GraphView;
GraphView.prototype.S = q("constellation");
GraphView.prototype.getConstellation = GraphView.prototype.S;
GraphView.prototype.e = function (a) {
    this.constellation = a;
    this.J()
};
GraphView.prototype.setConstellation = GraphView.prototype.e;
GraphView.prototype.nb = q("source");
GraphView.prototype.getSource = GraphView.prototype.nb;
GraphView.prototype.vb = function (a) {
    this.source = a;
    this.J()
};
GraphView.prototype.setSource = GraphView.prototype.vb;
GraphView.prototype.Xa = function () {
    this.J()
};
GraphView.prototype.sourceChanged = GraphView.prototype.Xa;
GraphView.prototype.lb = q("result");
GraphView.prototype.getResult = GraphView.prototype.lb;
GraphView.prototype.sb = function (a) {
    this.result = a;
    this.J()
};
GraphView.prototype.setResult = GraphView.prototype.sb;
GraphView.prototype.J = function () {
    if (this.Ga) {
        this.Ga = n;
        var a = this;
        window.setTimeout(function () {
            var b = a.validate();
            a.Ga = k;
            b && jQuery(a).trigger("change")
        }, 50)
    }
};
GraphView.prototype.invalidate = GraphView.prototype.J;
GraphView.prototype.Z = function () {
    return n
};
GraphView.prototype.validate = GraphView.prototype.Z;
DirectGraphView = function (a) {
    0 >= arguments.length || GraphView.call(this, a)
};
window.DirectGraphView = DirectGraphView;
DirectGraphView.prototype = new GraphView;
DirectGraphView.prototype.Z = function () {
    var a, b = this.result.U(),
        c = this.result.T(),
        d = this.source.I(),
        e = this.source.aa();
    for (a = 0; a < e.length; a++) index = c.indexOf(e[a].id), 0 <= index && (edge = this.result.o(e[a].id), edge.data = e[a].data, c.splice(index, 1), e.splice(a, 1), a--);
    for (a = 0; a < d.length; a++) index = b.indexOf(d[a].id), 0 <= index && (node = this.result.i(d[a].id), node.data = d[a].data, b.splice(index, 1), d.splice(a, 1), a--);
    for (a = 0; a < c.length; a++) this.result.X(c[a]);
    for (a = 0; a < b.length; a++) this.result.removeNode(b[a]);
    for (a = 0; a < d.length; a++) b = d[a], this.result.A(b.id, b.data);
    for (a = 0; a < e.length; a++) d = e[a], this.result.z(d.id, d.tailNode.id, d.headNode.id, d.data);
    return k
};
DirectGraphView.prototype.validate = DirectGraphView.prototype.Z;
TreeGraphView = function (a) {
    0 >= arguments.length || (GraphView.call(this, a), this.D = l, this.Aa = n, this.$ = 1)
};
window.TreeGraphView = TreeGraphView;
TreeGraphView.prototype = new GraphView;
TreeGraphView.prototype.e = function (a) {
    this.constellation && jQuery(this.constellation).unbind("nodeSelected");
    GraphView.prototype.e.call(this, a);
    this.constellation && jQuery(this.constellation).bind("nodeSelected", {
        context: this
    }, function (a) {
        a.data.context.Ra()
    })
};
TreeGraphView.prototype.setConstellation = TreeGraphView.prototype.e;
TreeGraphView.prototype.Ra = function () {
    this.Aa = k;
    this.D = this.constellation.Ka();
    this.J()
};
TreeGraphView.prototype.selectedNodeHandler = TreeGraphView.prototype.Ra;
TreeGraphView.prototype.Z = function () {
    var a, b;
    this.Aa && (this.$ = 2);
    if (a = this.source.i(this.D)) {
        a.depth = 0;
        var c = this.result.U(),
            d = this.result.T(),
            e = [a],
            f = [];
        b = {};
        var g = [a];
        for (b[this.D] = {
            N: this.$,
            ca: 0
        }; 0 < g.length;) {
            var i = g.shift(),
                j = b[i.id];
            if (0 < j.N) {
                var m = i.edges;
                for (a = 0; a < m.length; a++) {
                    var p = m[a],
                        s;
                    s = p.tailNode.id == i.id ? p.headNode : p.tailNode;
                    var r = b[s.id];
                    if ((!r || r.N < j.N - 1) && 1 < j.N) r = j.N - 1, s.depth = j.ca + 1, e.push(s), g.push(s), r = {
                        N: r,
                        ca: j.ca + 1
                    }, b[s.id] = r;
                    0 > jQuery.inArray(p, f) && r && (p.depth = j.ca, f.push(p))
                }
            }
        }
        for (a = 0; a < f.length; a++) b = d.indexOf(f[a].id), 0 <= b && (p = this.result.o(f[a].id), p.data = f[a].data, d.splice(b, 1), f.splice(a, 1), a--);
        for (a = 0; a < e.length; a++) b = c.indexOf(e[a].id), 0 <= b && (node = this.result.i(e[a].id), node.data = e[a].data, c.splice(b, 1), e.splice(a, 1), a--);
        for (a = 0; a < d.length; a++) this.result.X(d[a]);
        for (a = 0; a < c.length; a++) this.result.removeNode(c[a]);
        for (a = 0; a < e.length; a++) c = e[a], this.result.A(c.id, c.data);
        for (a = 0; a < f.length; a++) e = f[a], this.result.z(e.id, e.tailNode.id, e.headNode.id, e.data);
        this.Aa = n;
        if (3 > this.$) {
            clearTimeout(this.ob);
            var t = this;
            this.ob = setTimeout(function () {
                t.$++;
                t.J()
            }, 1E3)
        }
        return k
    }
};
TreeGraphView.prototype.validate = TreeGraphView.prototype.Z;
Layout = function (a) {
    0 >= arguments.length || (this.config = a)
};
window.Layout = Layout;
Layout.prototype.S = q("constellation");
Layout.prototype.getConstellation = Layout.prototype.S;
Layout.prototype.e = function (a) {
    this.constellation = a
};
Layout.prototype.setConstellation = Layout.prototype.e;
Layout.prototype.F = function () {
    for (var a = this.constellation.I(), b = 0; b < a.length; b++) {
        var c = a[b];
        if (c.x == l || c.y == l) c.x = 10 * Math.floor((100 * Math.random() - 50) / 10), c.y = 10 * Math.floor((100 * Math.random() - 50) / 10)
    }
    jQuery(this).trigger("change")
};
Layout.prototype.viewChanged = Layout.prototype.F;
StaticLayout = function (a) {
    0 >= arguments.length || (Layout.call(this, a), this.s = l)
};
window.StaticLayout = StaticLayout;
StaticLayout.prototype = new Layout;
StaticLayout.prototype.e = function (a) {
    this.constellation && jQuery(this.constellation).unbind("nodemousedown").unbind("mouseup");
    Layout.prototype.e.call(this, a);
    this.constellation && jQuery(this.constellation).bind("nodemousedown", {
        context: this
    }, function (a) {
        a.data.context.W(a)
    }).bind("mouseup", {
        context: this
    }, function (a) {
        a.data.context.va(a)
    })
};
StaticLayout.prototype.setConstellation = StaticLayout.prototype.e;
StaticLayout.prototype.F = function () {
    for (var a = this.constellation.I(), b = 0; b < a.length; b++) {
        var c = a[b];
        if (c.x == l || c.y == l) c.x = c.data.x ? c.data.x : (Math.random() - 0.5) * this.constellation.R, c.y = c.data.y ? c.data.y : (Math.random() - 0.5) * this.constellation.O
    }
    jQuery(this).trigger("change")
};
StaticLayout.prototype.viewChanged = StaticLayout.prototype.F;
StaticLayout.prototype.W = function () {
    this.step()
};
StaticLayout.prototype.va = function () {
    this.s && clearInterval(this.s)
};
StaticLayout.prototype.step = function () {
    for (var a in this.constellation.h) {
        var b = this.constellation.h[a];
        if (b.K) {
            var c = b.f,
                d = b.K,
                e = this.constellation.t(c.pageX) - b.da,
                b = this.constellation.u(0, c.pageY) - b.ea;
            d.x = this.constellation.P(e, b);
            d.y = this.constellation.Q(e, b)
        }
    }
    jQuery(this).trigger("change");
    this.s && clearTimeout(this.s);
    this.s = setTimeout(function (a) {
        return function () {
            a.step()
        }
    }(this), 40)
};
RoamerLayout = function (a) {
    0 >= arguments.length || (Layout.call(this, a), this.s = l, this.Ba = [])
};
window.RoamerLayout = RoamerLayout;
RoamerLayout.prototype = new Layout;
RoamerLayout.prototype.e = function (a) {
    this.constellation && (jQuery(this.constellation).unbind("nodeAdded"), this.s && clearTimeout(this.s));
    Layout.prototype.e.call(this, a);
    this.constellation && (jQuery(this.constellation).bind("nodeAdded", {
        context: this
    }, function (a, c) {
        a.data.context.Ba.push(c)
    }), this.step())
};
RoamerLayout.prototype.setConstellation = RoamerLayout.prototype.e;
RoamerLayout.prototype.F = o();
RoamerLayout.prototype.viewChanged = RoamerLayout.prototype.F;
RoamerLayout.prototype.step = function () {
    for (; 0 < this.Ba.length;) u(this, this.Ba.shift());
    for (var a = this.constellation.Ja(), b = -0.1 * (a.x + a.width / 2), a = -0.1 * (a.y + a.height / 2), c = this.constellation.I(), d = 0; d < c.length; d++) for (var e = c[d], f = d + 1; f < c.length; f++) {
        var g = c[f],
            i = g.x - e.x,
            j = g.y - e.y;
        0 == i && 0 == j && (i = 0.5 * Math.random(), j = 0.5 * Math.random());
        for (var m = Math.sqrt(i * i + j * j), p = i - 100 * (i / m), s = j - 100 * (j / m), i = j = 0, r = n, t = 0; t < e.edges.length; t++) {
            var x = e.edges[t];
            if (x.tailNode.id == g.id || x.headNode.id == g.id) r = k
        }
        r && 100 < m ? (j = 0.2 * p, i = 0.2 * s) : 100 > m && (j = 0.2 * p, i = 0.2 * s);
        m = 1;
        p = e.edges.length;
        0 < p && (m = 1 / Math.pow(p, 1 / 3));
        e.ax += j * m;
        e.ay += i * m;
        m = 1;
        p = g.edges.length;
        0 < p && (m = 1 / Math.pow(p, 1 / 3));
        g.ax -= j * m;
        g.ay -= i * m
    }
    for (d = 0; d < c.length; d++) e = c[d], f = Math.sqrt(e.ax * e.ax + e.ay * e.ay), 15 < f && (e.ax = 15 * (e.ax / f), e.ay = 15 * (e.ay / f)), e.ax -= 0.3 * e.vx, e.ay -= 0.3 * e.vy, e.vx += e.ax, e.vy += e.ay, e.x += e.vx + b, e.y += e.vy + a, e.ax = 0, e.ay = 0;
    for (var A in this.constellation.h) c = this.constellation.h[A], c.K && (d = c.f, b = c.K, a = this.constellation.t(d.pageX) - c.da, c = this.constellation.u(0, d.pageY) - c.ea, b.x = this.constellation.P(a, c), b.y = this.constellation.Q(a, c));
    jQuery(this).trigger("change");
    this.s && clearTimeout(this.s);
    this.s = setTimeout(function (a) {
        return function () {
            a.step()
        }
    }(this), 40)
};

function u(a, b) {
    var c = 0,
        d = 0,
        e = b.pa().filter(a.Ia),
        f = v(e);
    1 < e.length ? (c = f.x, d = f.y) : 0 < e.length && (d = e[0], c = d.pa().filter(a.Ia), 0 < c.length ? (c = v(c), e = {
        x: d.x - c.x,
        y: d.y - c.y
    }, f = Math.sqrt(e.x * e.x + e.y * e.y), c = d.x + 50 * e.x / f, d = d.y + 50 * e.y / f) : (c = d.x, d = d.y));
    b.x = c + Math.random() - 0.5;
    b.y = d + Math.random() - 0.5
}
RoamerLayout.prototype.Ia = function (a) {
    return a.x != l || a.y != l
};

function v(a) {
    if (0 >= a.length) return l;
    for (var b = 0, c = 0, d = 0; d < a.length; d++) var e = a[d],
        b = b + e.x,
        c = c + e.y;
    return {
        x: b / a.length,
        y: c / a.length
    }
};
NodeRenderer = function (a, b, c) {
    this.constellation = a;
    Node.call(this, b, c);
    this.data.classes || (this.data.classes = []);
    this.y = this.x = l;
    this.ay = this.ax = this.vy = this.vx = 0
};
window.NodeRenderer = NodeRenderer;
NodeRenderer.prototype = new Node;
NodeRenderer.prototype.B = {};
NodeRenderer.prototype.g = function (a) {
    return this.constellation.g("node", this.data.classes, a, this.data, this.B)
};
NodeRenderer.prototype.getStyle = NodeRenderer.prototype.g;
NodeRenderer.prototype.addClass = function (a) {
    0 > jQuery.inArray(a, this.data.classes) && this.data.classes.push(a)
};
NodeRenderer.prototype.addClass = NodeRenderer.prototype.addClass;
NodeRenderer.prototype.hasClass = function (a) {
    return 0 <= jQuery.inArray(a, this.data.classes)
};
NodeRenderer.prototype.hasClass = NodeRenderer.prototype.hasClass;
NodeRenderer.prototype.removeClass = function (a) {
    for (var b; 0 <= (b = jQuery.inArray(a, this.data.classes));) this.data.classes.splice(b, 1)
};
NodeRenderer.prototype.removeClass = NodeRenderer.prototype.removeClass;
NodeRenderer.prototype.create = o();
NodeRenderer.prototype.create = NodeRenderer.prototype.create;
NodeRenderer.prototype.l = o();
NodeRenderer.prototype.draw = NodeRenderer.prototype.l;
NodeRenderer.prototype.position = o();
NodeRenderer.prototype.position = NodeRenderer.prototype.position;
NodeRenderer.prototype.n = o();
NodeRenderer.prototype.destroy = NodeRenderer.prototype.n;
DefaultNodeRenderer = function (a, b, c) {
    NodeRenderer.call(this, a, b, c)
};
window.DefaultNodeRenderer = DefaultNodeRenderer;
DefaultNodeRenderer.prototype = new NodeRenderer;
DefaultNodeRenderer.prototype.B = {};
DefaultNodeRenderer.prototype.create = function () {
    var a = this.constellation.svg,
        b = a.group(this.constellation.qa(), {
            display: "none"
        });
    this.a = {
        group: b,
        G: a.circle(b, 0, 0, 30, {
            fill: "#ffffff",
            stroke: "#666666",
            strokeWidth: 1
        }),
        ta: a.rect(b, 0, 0, 0, 0, 2, 2, {
            fill: "#ffffcc",
            stroke: "#333333",
            strokeWidth: 1
        }),
        label: a.text(b, 0, 0, this.data.label, {
            style: "-webkit-user-select: none;-khtml-user-select: none;-moz-user-select: none;-o-user-select: none;user-select: none;",
            fontFamily: "Verdana",
            fontSize: 15,
            fontWeight: "bold",
            fill: "#441111",
            textAnchor: "middle",
            dy: ".35em"
        })
    };
    jQuery(this.a.group).bind("mouseover", {
        context: this
    }, function (a) {
        a.data.context.constellation.ya(0, a.data.context)
    }).bind("mouseout", {
        context: this
    }, function (a) {
        a.data.context.constellation.xa(0, a.data.context)
    }).bind("mousedown", {
        context: this
    }, function (a) {
        a.data.context.constellation.W(a, a.data.context)
    }).bind("mouseup", {
        context: this
    }, function (a) {
        a.data.context.constellation.za(0, a.data.context)
    }).bind("click", {
        context: this
    }, function (a) {
        a.data.context.constellation.wa(0, a.data.context)
    })
};
DefaultNodeRenderer.prototype.create = DefaultNodeRenderer.prototype.create;
DefaultNodeRenderer.prototype.l = function () {
    var a = this.a.label.getBBox(),
        b = jQuery(this.a.ta);
    0 < a.width && 0 < a.height ? (b.css("display", "inline"), b.attr("x", a.x - 8), b.attr("y", a.y - 3), b.attr("width", a.width + 16), b.attr("height", a.height + 6)) : b.css("display", "none");
    this.position();
    jQuery(this.a.group).css("display", "inline")
};
DefaultNodeRenderer.prototype.draw = DefaultNodeRenderer.prototype.l;
DefaultNodeRenderer.prototype.position = function () {
    jQuery(this.a.group).attr("transform", "translate(" + this.x + "," + this.y + ")")
};
DefaultNodeRenderer.prototype.position = DefaultNodeRenderer.prototype.position;
DefaultNodeRenderer.prototype.n = function () {
    jQuery(this.a.group).remove();
    this.a = l
};
DefaultNodeRenderer.prototype.destroy = DefaultNodeRenderer.prototype.n;
RoamerNodeRenderer = function (a, b, c) {
    NodeRenderer.call(this, a, b, c);
    this.Na = this.Ma = this.label = l
};
window.RoamerNodeRenderer = RoamerNodeRenderer;
RoamerNodeRenderer.prototype = new NodeRenderer;
RoamerNodeRenderer.prototype.B = {
    label: "",
    tooltip: "",
    url: "",
    url_target: "_self",
    graphic_type: "shape",
    graphic_image_url: "",
    graphic_shape: "circle",
    graphic_fill_color: "#ffffff",
    graphic_line_color: "#000000",
    graphic_gradient_fill: k,
    graphic_size: 40,
    selected_graphic_shape: "circle",
    selected_graphic_fill_color: "#ffffff",
    selected_graphic_line_color: "#000000",
    selected_graphic_gradient_fill: k,
    selected_graphic_size: 40,
    left_icon_url: "",
    right_icon_url: "",
    selected_left_icon_url: "",
    selected_right_icon_url: "",
    left_icon_spacing: 0,
    right_icon_spacing: 0,
    label_bg_enabled: k,
    label_bg_fill_color: "#ffffff",
    label_bg_line_color: "#000000",
    label_bg_rounded_corners: k,
    selected_label_bg_enabled: k,
    selected_label_bg_fill_color: "#ffffff",
    selected_label_bg_line_color: "#000000",
    selected_label_bg_rounded_corners: k,
    label_position: "center",
    label_embed_fonts: k,
    label_font_color: "#000000",
    label_font_bold: n,
    label_font_family: "Arial",
    label_font_italic: n,
    label_font_size: 12,
    selected_label_font_color: "#000000",
    selected_label_font_bold: k,
    selected_label_font_family: "Arial",
    selected_label_font_italic: n,
    selected_label_font_size: 12
};
RoamerNodeRenderer.prototype.create = function () {
    var a = this.constellation.svg,
        b = a.group(this.constellation.qa(), {
            display: "none"
        });
    this.a = {
        group: b,
        La: a.group(b),
        G: l,
        ta: a.rect(b, 0, 0, 0, 0, 2, 2, {
            fill: "#ffffcc",
            stroke: "#333333",
            strokeWidth: 1
        }),
        label: a.text(b, 0, 0, "", {
            style: "-webkit-user-select: none;-khtml-user-select: none;-moz-user-select: none;-o-user-select: none;user-select: none;",
            fontFamily: "Verdana",
            fontSize: 15,
            fontWeight: "bold",
            fill: "#441111",
            textAnchor: "middle",
            dy: ".35em"
        })
    };
    jQuery(this.a.group).bind("mouseover", {
        context: this
    }, function (a) {
        a.data.context.constellation.ya(0, a.data.context)
    }).bind("mouseout", {
        context: this
    }, function (a) {
        a.data.context.constellation.xa(0, a.data.context)
    }).bind("mousedown", {
        context: this
    }, function (a) {
        a.data.context.constellation.W(a, a.data.context)
    }).bind("mouseup", {
        context: this
    }, function (a) {
        a.data.context.constellation.za(0, a.data.context)
    }).bind("click", {
        context: this
    }, function (a) {
        a.data.context.constellation.wa(0, a.data.context)
    })
};
RoamerNodeRenderer.prototype.create = RoamerNodeRenderer.prototype.create;
RoamerNodeRenderer.prototype.l = function () {
    var a = this.constellation.svg;
    jQuery(this.a.group).css("display", "inline");
    var b = {
        fill: this.g("graphic_fill_color"),
        stroke: this.g("graphic_line_color")
    },
        c = this.g("label"),
        d = this.g("graphic_size"),
        e = this.g("graphic_shape");
    if (this.Ma != e) switch (this.a.G && (jQuery(this.a.G).remove(), this.a.G = l), e) {
    case "pentagon":
        break;
    case "square":
        this.a.G = a.rect(this.a.La, -d / 2, -d / 2, d, d, b);
        break;
    case "diamond":
        break;
    case "triangle":
        break;
    case "circle":
        this.a.G = a.circle(this.a.La, 0, 0, d / 2, b);
        break;
    default:
        h("Failed to draw node graphic. Unknown shape. shape='" + e + "'")
    } else {
        if (this.Na != d) switch (e) {
        case "pentagon":
            break;
        case "square":
            b.x = -d / 2;
            b.y = -d / 2;
            b.width = d;
            b.height = d;
            break;
        case "diamond":
            break;
        case "triangle":
            break;
        case "circle":
            a.change(this.a.G, {
                r: d / 2
            });
            break;
        default:
            h("Failed to draw node graphic. Unknown shape. shape='" + e + "'")
        }
        a.change(this.a.G, b)
    }
    this.label != c && jQuery(this.a.label).contents().remove().end().append(c);
    a = this.a.label.getBBox();
    b = jQuery(this.a.ta);
    0 < a.width && 0 < a.height ? (b.css("display", "inline"), b.attr("x", a.x - 8), b.attr("y", a.y - 3), b.attr("width", a.width + 16), b.attr("height", a.height + 6)) : b.css("display", "none");
    this.position();
    this.label = c;
    this.Na = d;
    this.Ma = e
};
RoamerNodeRenderer.prototype.draw = RoamerNodeRenderer.prototype.l;
RoamerNodeRenderer.prototype.position = function () {
    jQuery(this.a.group).attr("transform", "translate(" + this.x + "," + this.y + ")")
};
RoamerNodeRenderer.prototype.position = RoamerNodeRenderer.prototype.position;
RoamerNodeRenderer.prototype.n = function () {
    jQuery(this.a.group).remove();
    this.a = l
};
RoamerNodeRenderer.prototype.destroy = RoamerNodeRenderer.prototype.n;
EdgeRenderer = function (a, b, c, d, e) {
    this.constellation = a;
    Edge.call(this, b, c, d, e);
    this.data.classes || (this.data.classes = [])
};
window.EdgeRenderer = EdgeRenderer;
EdgeRenderer.prototype = new Edge;
EdgeRenderer.prototype.B = {};
EdgeRenderer.prototype.g = function (a) {
    return this.constellation.g("edge", this.data.classes, a, this.data, this.B)
};
EdgeRenderer.prototype.getStyle = EdgeRenderer.prototype.g;
EdgeRenderer.prototype.addClass = function (a) {
    0 > jQuery.inArray(a, this.data.classes) && this.data.classes.push(a)
};
EdgeRenderer.prototype.addClass = EdgeRenderer.prototype.addClass;
EdgeRenderer.prototype.hasClass = function (a) {
    return 0 <= jQuery.inArray(a, this.data.classes)
};
EdgeRenderer.prototype.hasClass = EdgeRenderer.prototype.hasClass;
EdgeRenderer.prototype.removeClass = function (a) {
    for (var b; 0 <= (b = jQuery.inArray(a, this.data.classes));) this.data.classes.splice(b, 1)
};
EdgeRenderer.prototype.removeClass = EdgeRenderer.prototype.removeClass;
EdgeRenderer.prototype.create = o();
EdgeRenderer.prototype.create = EdgeRenderer.prototype.create;
EdgeRenderer.prototype.l = o();
EdgeRenderer.prototype.draw = EdgeRenderer.prototype.l;
EdgeRenderer.prototype.n = o();
EdgeRenderer.prototype.destroy = EdgeRenderer.prototype.n;
DefaultEdgeRenderer = function (a, b, c, d, e) {
    EdgeRenderer.call(this, a, b, c, d, e)
};
window.DefaultEdgeRenderer = DefaultEdgeRenderer;
DefaultEdgeRenderer.prototype = new EdgeRenderer;
DefaultEdgeRenderer.prototype.B = {};
DefaultEdgeRenderer.prototype.create = function () {
    this.a = {
        line: this.constellation.svg.line(this.constellation.na(), 0, 0, 10, 0, {
            display: "none",
            stroke: "#999999",
            strokeWidth: 5
        })
    };
    jQuery(this.a.line).bind("mouseover", {
        context: this
    }, function (a) {
        a.data.context.constellation.la(0, a.data.context)
    }).bind("mouseout", {
        context: this
    }, function (a) {
        a.data.context.constellation.ka(0, a.data.context)
    }).bind("mousedown", {
        context: this
    }, function (a) {
        a.data.context.constellation.ja(a, a.data.context)
    }).bind("mouseup", {
        context: this
    }, function (a) {
        a.data.context.constellation.ma(0, a.data.context)
    }).bind("click", {
        context: this
    }, function (a) {
        a.data.context.constellation.ia(0, a.data.context)
    })
};
DefaultEdgeRenderer.prototype.create = DefaultEdgeRenderer.prototype.create;
DefaultEdgeRenderer.prototype.l = function () {
    jQuery(this.a.line).attr("x1", this.tailNode.x).attr("y1", this.tailNode.y).attr("x2", this.headNode.x).attr("y2", this.headNode.y).css("display", "inline")
};
DefaultEdgeRenderer.prototype.draw = DefaultEdgeRenderer.prototype.l;
DefaultEdgeRenderer.prototype.n = function () {
    jQuery(this.a.line).remove()
};
DefaultEdgeRenderer.prototype.destroy = DefaultEdgeRenderer.prototype.n;
RoamerEdgeRenderer = function (a, b, c, d, e) {
    EdgeRenderer.call(this, a, b, c, d, e)
};
window.RoamerEdgeRenderer = RoamerEdgeRenderer;
RoamerEdgeRenderer.prototype = new EdgeRenderer;
RoamerEdgeRenderer.prototype.B = {
    tooltip: "",
    edge_line_color: "#000000",
    edge_line_thickness: 1,
    arrowhead: k,
    bidirectional: n,
    reverse: n,
    edge_length_weight: 0
};
RoamerEdgeRenderer.prototype.create = function () {
    this.a = {
        line: this.constellation.svg.line(this.constellation.na(), 0, 0, 10, 0, {
            display: "none",
            stroke: this.g("edge_line_color"),
            strokeWidth: this.g("edge_line_thickness")
        })
    };
    jQuery(this.a.line).bind("mouseover", {
        context: this
    }, function (a) {
        a.data.context.constellation.la(0, a.data.context)
    }).bind("mouseout", {
        context: this
    }, function (a) {
        a.data.context.constellation.ka(0, a.data.context)
    }).bind("mousedown", {
        context: this
    }, function (a) {
        a.data.context.constellation.ja(a, a.data.context)
    }).bind("mouseup", {
        context: this
    }, function (a) {
        a.data.context.constellation.ma(0, a.data.context)
    }).bind("click", {
        context: this
    }, function (a) {
        a.data.context.constellation.ia(0, a.data.context)
    })
};
RoamerEdgeRenderer.prototype.create = RoamerEdgeRenderer.prototype.create;
RoamerEdgeRenderer.prototype.l = function () {
    jQuery(this.a.line).attr("x1", this.tailNode.x).attr("y1", this.tailNode.y).attr("x2", this.headNode.x).attr("y2", this.headNode.y).css("stroke", this.g("edge_line_color")).css("strokeWidth", this.g("edge_line_thickness")).css("display", "inline")
};
RoamerEdgeRenderer.prototype.draw = RoamerEdgeRenderer.prototype.l;
RoamerEdgeRenderer.prototype.n = function () {
    jQuery(this.a.line).remove()
};
RoamerEdgeRenderer.prototype.destroy = RoamerEdgeRenderer.prototype.n;
Constellation = function (a, b) {
    this.config = jQuery.extend(k, this.Ya, a);
    this.fa = b ? b : this.B;
    this.d = [];
    this.c = [];
    this.svg = l;
    this.w = this.v = this.O = this.R = 0;
    this.j = 1;
    this.rotation = 0;
    this.h = {};
    this.Y = this.D = this.m = this.b = l
};
window.Constellation = Constellation;
Constellation.yb = {};
Constellation.prototype.pb = function () {
    this.debug("Initializing Constellation.");
    document.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure", "1.1") || h("Failed to initialize Constellation. SVG not supported.");
    var a = jQuery("#" + this.config.id);
    0 >= a.length && h("Failed to initialize Constellation. Container does not exist.");
    a.html('<div style="position:relative;width:100%;height:100%"><div class="container" style="overflow:hidden;position:absolute;width:100%;height:100%;z-index:2"></div><div class="background" style="position:absolute;width:100%;height:100%;z-index:1"></div></div>');
    this.H = a.find("div.container");
    this.H.svg({
        onLoad: function (a) {
            return function (c) {
                a.svg = c;
                a.debug("SVG initialized");
                w(a);
                a.Ha = a.svg.group();
                a.$a = a.svg.group(a.Ha);
                a.Qa = a.svg.group(a.Ha);
                y(a)
            }
        }(this)
    });
    this.Oa();
    this.Wa(new Graph);
    this.Sa(new this.config.graphLoaderClass(this.config.graphLoader));
    this.Ta(new this.config.graphParserClass(this.config.graphParser));
    this.Ua(new this.config.graphViewClass(this.config.graphView));
    this.Va(new this.config.layoutClass(this.config.layout));
    "createTouch" in document ? jQuery(this.canvas).bind("touchstart", {
        context: this
    }, function (a) {
        var c = a.data.context;
        a.preventDefault();
        for (var d = 0; d < a.L.changedTouches.length; d++) {
            var e = a.L.changedTouches[d],
                f = c.h["_" + e.identifier] = {
                    sa: k,
                    f: e,
                    timestamp: (new Date).getTime()
                },
                g = c.t(e.pageX),
                i = c.u(0, e.pageY),
                j = c.xb(g, i);
            j ? (f.K = j, f.da = g - j.zb, f.ea = i - j.Ab, jQuery(c).trigger("nodetouchstart")) : (g = c.wb(g, i)) ? (f.Za = g, jQuery(c).trigger("edgetouchstart")) : (g = c.t(e.pageX), e = c.u(0, e.pageY), f.x = c.P(g, e), f.y = c.Q(g, e), c.b ? c.m || (c.m = f) : c.b = f, jQuery(c).trigger("backgroundtouchstart"))
        }
    }).bind("touchmove", {
        context: this
    }, function (a) {
        var c = a.data.context;
        a.preventDefault();
        z(c);
        jQuery(c).trigger("touchmove")
    }).bind("touchend", {
        context: this
    }, function (a) {
        var c = a.data.context;
        a.preventDefault();
        z(c);
        for (var d = 0; d < a.L.changedTouches.length; d++) var e = a.L.changedTouches[d],
            f = c.h["_" + e.identifier];
        for (d = 0; d < a.L.changedTouches.length; d++) e = a.L.changedTouches[d], f = c.h["_" + e.identifier], delete c.h["_" + e.identifier], c.b == f && (c.b = c.m, c.m = l, c.b && (c.b.pageX = c.b.f.pageX, c.b.pageY = c.b.f.pageY, c.b.v = c.v, c.b.w = c.w, c.b.j = c.j)), c.m == f && (c.m = l, c.b && (c.b.pageX = c.b.f.pageX, c.b.pageY = c.b.f.pageY, c.b.v = c.v, c.b.w = c.w, c.b.j = c.j));
        jQuery(c).trigger("touchend")
    }).bind("touchcancel", {
        context: this
    }, function (a) {
        var c = a.data.context;
        a.preventDefault();
        for (var d = 0; d < a.L.changedTouches.length; d++) delete c.h["_" + a.L.changedTouches[d].identifier];
        jQuery(c).trigger("touchcancel")
    }) : (jQuery(document).mousemove({
        context: this
    }, function (a) {
        var c = a.data.context,
            d = c.h._mouse;
        d && (d.f = a);
        z(c)
    }).mouseup({
        context: this
    }, function (a) {
        a.data.context.va(a)
    }), this.H.find("svg").mousedown({
        context: this
    }, function (a) {
        var c = a.data.context;
        if (a.target == a.currentTarget) {
            var d = c.h._mouse = {
                sa: n,
                f: a,
                timestamp: (new Date).getTime()
            },
                e = c.t(a.pageX),
                a = c.u(0, a.pageY);
            d.x = c.P(e, a);
            d.y = c.Q(e, a);
            c.b ? c.m || (c.m = d) : c.b = d;
            jQuery(c).trigger("backgroundmousedown")
        }
    }).click({
        context: this
    }, o()), jQuery(this.canvas).mousewheel({
        context: this
    }, function (a, c) {
        var d = a.data.context;
        a.preventDefault();
        d.M(d.ba() + 0.1 * c);
        jQuery(d).trigger("mousewheel")
    }));
    w(this);
    jQuery(this).trigger("initialized")
};
Constellation.prototype.init = Constellation.prototype.pb;
Constellation.prototype.Oa = function () {
    this.H.append('<div class="zoomControls"><button class="zoomInButton">Zoom in</button><div class="zoomSlider"></div><button class="zoomOutButton">Zoom out</button></div>');
    var a = this.config.id;
    jQuery("head").append('<style type="text/css">#' + a + " .zoomControls { position: absolute; right: 20px; top: 20px; width: 20px; z-index: 1 } #" + a + " .zoomControls .ui-button { height: 20px; margin: 1px 0; width: 20px } #" + a + " .zoomSlider { left: 3px; height: 225px; margin: 11px 0 } </style>");
    var b = this.config.zoomSlider;
    jQuery("#" + a + " .zoomInButton").button({
        icons: {
            primary: "ui-icon-plus"
        },
        text: n
    }).bind("click", {
        context: this
    }, function (a) {
        a = a.data.context;
        a.M(Math.min(b.max, a.ba() + b.step))
    });
    jQuery("#" + a + " .zoomOutButton").button({
        icons: {
            primary: "ui-icon-minus"
        },
        text: n
    }).bind("click", {
        context: this
    }, function (a) {
        a = a.data.context;
        a.M(Math.max(b.min, a.ba() - b.step))
    });
    jQuery("#" + a + " .zoomSlider").slider(b).bind("slide", {
        context: this
    }, function (a, b) {
        a.data.context.M(b.value)
    });
    this.M(b.value)
};
Constellation.prototype.initZoomControls = Constellation.prototype.Oa;
Constellation.prototype.Ya = {
    id: "constellation",
    graphLoaderClass: SimpleGraphLoader,
    graphLoader: {},
    graphParserClass: GraphMlParser,
    graphParser: {},
    graphViewClass: TreeGraphView,
    graphView: {},
    layoutClass: RoamerLayout,
    layout: {},
    zoomSlider: {
        orientation: "vertical",
        min: 0.2,
        max: 2,
        value: 1,
        step: 0.05
    }
};
Constellation.prototype.B = [
    ["node",
    {
        rendererClass: DefaultNodeRenderer
    }],
    ["edge",
    {
        rendererClass: DefaultEdgeRenderer
    }]
];
Constellation.prototype.hb = q("V");
Constellation.prototype.getModel = Constellation.prototype.hb;
Constellation.prototype.Wa = function (a) {
    this.debug("Set model:", a);
    this.V = a;
    this.q && this.q.setGraph(this.V);
    this.k && this.k.setSource(this.V);
    this.ua()
};
Constellation.prototype.setModel = Constellation.prototype.Wa;
Constellation.prototype.fb = q("k");
Constellation.prototype.getGraphView = Constellation.prototype.fb;
Constellation.prototype.Ua = function (a) {
    this.debug("Set graph view:", a);
    this.k && (this.k.setConstellation(l), this.k.setSource(l), this.k.setResult(l), jQuery(this.k).unbind("change"));
    if (this.k = a) this.k.setConstellation(this), this.k.setSource(this.V), this.k.setResult(this), jQuery(this.k).bind("change", {
        context: this
    }, function (a) {
        a.data.context.F()
    })
};
Constellation.prototype.setGraphView = Constellation.prototype.Ua;
Constellation.prototype.cb = q("p");
Constellation.prototype.getGraphLoader = Constellation.prototype.cb;
Constellation.prototype.Sa = function (a) {
    this.debug("Set graph loader:", a);
    this.p && (this.p.setConstellation(l), this.p.setParser(l));
    if (this.p = a) this.p.setConstellation(this), this.p.setParser(this.q)
};
Constellation.prototype.setGraphLoader = Constellation.prototype.Sa;
Constellation.prototype.eb = q("q");
Constellation.prototype.getGraphParser = Constellation.prototype.eb;
Constellation.prototype.Ta = function (a) {
    this.debug("Set graph parser:", a);
    this.q && (this.p && this.p.setParser(l), this.q.setGraph(l), jQuery(this.q).unbind("complete"));
    if (this.q = a) this.p && this.p.setParser(this.q), this.q.setGraph(this.V), jQuery(this.q).bind("complete", {
        context: this
    }, function (a) {
        a.data.context.ua()
    })
};
Constellation.prototype.setGraphParser = Constellation.prototype.Ta;
Constellation.prototype.gb = q("C");
Constellation.prototype.getLayout = Constellation.prototype.gb;
Constellation.prototype.Va = function (a) {
    this.debug("Set layout:", a);
    this.C && (this.C.setConstellation(l), jQuery(this.C).unbind("change"));
    if (this.C = a) this.C.setConstellation(this), jQuery(this.C).bind("change", {
        context: this
    }, function (a) {
        a.data.context.Pa()
    })
};
Constellation.prototype.setLayout = Constellation.prototype.Va;
Constellation.prototype.qa = q("Qa");
Constellation.prototype.getNodeContainer = Constellation.prototype.qa;
Constellation.prototype.na = q("$a");
Constellation.prototype.getEdgeContainer = Constellation.prototype.na;
Constellation.prototype.Ka = q("D");
Constellation.prototype.getSelectedNodeId = Constellation.prototype.Ka;
Constellation.prototype.ub = function (a) {
    this.debug("Set selected node ID:", a);
    this.Y && (this.Y = l, jQuery(this).trigger("edgeSelected"));
    this.D != a && (this.D = a, jQuery(this).trigger("nodeSelected"))
};
Constellation.prototype.setSelectedNodeId = Constellation.prototype.ub;
Constellation.prototype.mb = q("Y");
Constellation.prototype.getSelectedEdgeId = Constellation.prototype.mb;
Constellation.prototype.tb = function (a) {
    this.D && (this.D = l, jQuery(this).trigger("nodeSelected"));
    this.Y != a && (this.Y = a, jQuery(this).trigger("edgeSelected"))
};
Constellation.prototype.setSelectedEdgeId = Constellation.prototype.tb;
Constellation.prototype.Ja = function () {
    return this.Qa.getBBox()
};
Constellation.prototype.getRendererBounds = Constellation.prototype.Ja;
Constellation.prototype.A = function (a, b) {
    this.debug("Add node:", a);
    this.i(a) && h("Failed to add node. Node already exists.");
    var c = new(this.g("node", b ? b.classes : [], "rendererClass", b, {
        rendererClass: DefaultNodeRenderer
    }))(this, a, b);
    c.create();
    c.draw();
    this.d.push(c);
    jQuery(this).trigger("nodeAdded", c);
    return c
};
Constellation.prototype.addNode = Constellation.prototype.A;
Constellation.prototype.i = function (a) {
    for (var b = 0; b < this.d.length; b++) if (this.d[b].id == a) return this.d[b];
    return l
};
Constellation.prototype.getNode = Constellation.prototype.i;
Constellation.prototype.I = function () {
    return this.d.concat()
};
Constellation.prototype.getNodes = Constellation.prototype.I;
Constellation.prototype.U = function () {
    return this.d.map(function (a) {
        return a.id
    })
};
Constellation.prototype.getNodeIds = Constellation.prototype.U;
Constellation.prototype.ra = function () {
    return this.d.length
};
Constellation.prototype.getNodeLength = Constellation.prototype.ra;
Constellation.prototype.removeNode = function (a) {
    this.debug("Remove node:", a);
    for (var b = 0; b < this.d.length; b++) {
        var c = this.d[b];
        if (c.id == a) {
            c.destroy(c);
            this.d.splice(b, 1);
            jQuery(this).trigger("nodeRemoved", c);
            return
        }
    }
    h("Failed to remove node. Node does not exist.")
};
Constellation.prototype.removeNode = Constellation.prototype.removeNode;
Constellation.prototype.Da = function (a, b) {
    var c = this.i(a);
    c ? c.data = b : h("Failed to update node. Node does not exist.");
    return c
};
Constellation.prototype.updateNode = Constellation.prototype.Da;
Constellation.prototype.Fa = function (a, b, c, d) {
    var c = 2 < arguments.length ? c : n,
        d = 3 < arguments.length ? d : n,
        e = this.i(a);
    e ? e.data = c ? jQuery.extend(d, e.data, b) : b : e = this.A(a, b);
    return e
};
Constellation.prototype.upsertNode = Constellation.prototype.Fa;
Constellation.prototype.z = function (a, b, c, d) {
    this.debug("Add edge:", a);
    this.o(a) && h("Failed to add edge. Edge already exists.");
    (b = this.i(b)) || h("Failed to add edge. Tail node does not exist.");
    (c = this.i(c)) || h("Failed to add edge. Head node does not exist.");
    a = new(this.g("edge", d ? d.classes : [], "rendererClass", d, {
        rendererClass: DefaultNodeRenderer
    }))(this, a, b, c, d);
    a.create();
    a.draw();
    this.c.push(a);
    b.edges.push(a);
    c.edges.push(a);
    jQuery(this).trigger("edgeAdded", a);
    return a
};
Constellation.prototype.addEdge = Constellation.prototype.z;
Constellation.prototype.o = function (a) {
    for (var b = 0; b < this.c.length; b++) if (this.c[b].id == a) return this.c[b];
    return l
};
Constellation.prototype.getEdge = Constellation.prototype.o;
Constellation.prototype.T = function () {
    return this.c.map(function (a) {
        return a.id
    })
};
Constellation.prototype.getEdgeIds = Constellation.prototype.T;
Constellation.prototype.aa = function () {
    return this.c.concat()
};
Constellation.prototype.getEdges = Constellation.prototype.aa;
Constellation.prototype.oa = function () {
    return this.c.length
};
Constellation.prototype.getEdgeLength = Constellation.prototype.oa;
Constellation.prototype.X = function (a) {
    this.debug("Remove edge:", a);
    var b, c = l;
    for (b = 0; b < this.c.length; b++) if (this.c[b].id == a) {
        c = this.c[b];
        c.destroy();
        this.c.splice(b, 1);
        break
    }
    if (c) {
        for (b = 0; b < c.tailNode.edges.length; b++) if (c.tailNode.edges[b].id == a) {
            c.tailNode.edges.splice(b, 1);
            break
        }
        for (b = 0; b < c.headNode.edges.length; b++) if (c.headNode.edges[b].id == a) {
            c.headNode.edges.splice(b, 1);
            break
        }
        jQuery(this).trigger("edgeRemoved", c)
    } else h("Failed to remove edge. Edge does not exist.")
};
Constellation.prototype.removeEdge = Constellation.prototype.X;
Constellation.prototype.Ca = function (a, b) {
    var c = this.o(a);
    c ? c.data = b : h("Failed to update edge. Edge does not exist.");
    return c
};
Constellation.prototype.updateEdge = Constellation.prototype.Ca;
Constellation.prototype.Ea = function (a, b, c, d, e, f) {
    var e = 4 < arguments.length ? e : n,
        f = 5 < arguments.length ? f : n,
        g = this.o(a);
    g ? g.data = e ? jQuery.extend(f, g.data, d) : d : g = this.z(a, b, c, d);
    return g
};
Constellation.prototype.upsertEdge = Constellation.prototype.Ea;
Constellation.prototype.ua = function () {
    this.debug("Model changed");
    this.k && this.k.Xa()
};
Constellation.prototype.modelChanged = Constellation.prototype.ua;
Constellation.prototype.F = function () {
    this.debug("View changed");
    this.C && this.C.F()
};
Constellation.prototype.viewChanged = Constellation.prototype.F;
Constellation.prototype.Pa = function () {
    this.l()
};
Constellation.prototype.layoutChanged = Constellation.prototype.Pa;
Constellation.prototype.l = function () {
    var a;
    w(this);
    var b = this.d;
    for (a = 0; a < b.length; a++) b[a].position();
    b = this.c;
    for (a = 0; a < b.length; a++) b[a].draw()
};

function w(a) {
    a.R = a.H.width();
    a.O = a.H.height();
    y(a)
}
function y(a) {
    jQuery(a.Ha).attr("transform", "translate(" + (a.R / 2 - a.v) + "," + (a.O / 2 - a.w) + ")scale(" + a.j + "," + a.j + ")")
}
Constellation.prototype.ba = q("j");
Constellation.prototype.getZoomScale = Constellation.prototype.ba;
Constellation.prototype.M = function (a) {
    this.j = a;
    y(this)
};
Constellation.prototype.setZoomScale = Constellation.prototype.M;
Constellation.prototype.P = function (a, b) {
    return (a - this.R / 2 + this.v) / this.j * Math.cos(-this.rotation) - (b - this.O / 2 + this.w) / this.j * Math.sin(-this.rotation)
};
Constellation.prototype.viewportToWorldX = Constellation.prototype.P;
Constellation.prototype.Q = function (a, b) {
    return (a - this.R / 2 + this.v) / this.j * Math.sin(-this.rotation) + (b - this.O / 2 + this.w) / this.j * Math.cos(-this.rotation)
};
Constellation.prototype.viewportToWorldY = Constellation.prototype.Q;
Constellation.prototype.ga = function (a, b) {
    return (a * Math.cos(this.rotation) - b * Math.sin(this.rotation)) * this.j + this.R / 2 - this.v
};
Constellation.prototype.worldToViewportX = Constellation.prototype.ga;
Constellation.prototype.ha = function (a, b) {
    return (a * Math.sin(this.rotation) + b * Math.cos(this.rotation)) * this.j + this.O / 2 - this.w
};
Constellation.prototype.worldToViewportY = Constellation.prototype.ha;
Constellation.prototype.t = function (a) {
    return a - this.H.offset().left
};
Constellation.prototype.pageToViewportX = Constellation.prototype.t;
Constellation.prototype.u = function (a, b) {
    return b - this.H.offset().top
};
Constellation.prototype.pageToViewportY = Constellation.prototype.u;
Constellation.prototype.ya = function (a, b) {
    jQuery(this).trigger("nodemouseover", b.id)
};
Constellation.prototype.nodemouseoverHandler = Constellation.prototype.ya;
Constellation.prototype.xa = function (a, b) {
    jQuery(this).trigger("nodemouseout", b.id)
};
Constellation.prototype.nodemouseoutHandler = Constellation.prototype.xa;
Constellation.prototype.W = function (a, b) {
    var c = this.h._mouse = {
        sa: n,
        K: b,
        f: a,
        timestamp: (new Date).getTime()
    },
        d = this.t(a.pageX),
        e = this.u(0, a.pageY);
    c.da = this.P(d, e) - b.x;
    c.ea = this.Q(d, e) - b.y;
    jQuery(this).trigger("nodemousedown", b.id)
};
Constellation.prototype.nodemousedownHandler = Constellation.prototype.W;
Constellation.prototype.za = function (a, b) {
    jQuery(this).trigger("nodemouseup", b.id)
};
Constellation.prototype.nodemouseupHandler = Constellation.prototype.za;
Constellation.prototype.wa = function (a, b) {
    jQuery(this).trigger("nodeclick", b.id)
};
Constellation.prototype.nodeclickHandler = Constellation.prototype.wa;
Constellation.prototype.la = function (a, b) {
    jQuery(this).trigger("edgemouseover", b.id)
};
Constellation.prototype.edgemouseoverHandler = Constellation.prototype.la;
Constellation.prototype.ka = function (a, b) {
    jQuery(this).trigger("edgemouseout", b.id)
};
Constellation.prototype.edgemouseoutHandler = Constellation.prototype.ka;
Constellation.prototype.ja = function (a, b) {
    this.h._mouse = {
        Za: b,
        sa: n,
        f: a,
        timestamp: (new Date).getTime()
    };
    jQuery(this).trigger("edgemousedown", b.id)
};
Constellation.prototype.edgemousedownHandler = Constellation.prototype.ja;
Constellation.prototype.ma = function (a, b) {
    jQuery(this).trigger("edgemouseup", b.id)
};
Constellation.prototype.edgemouseupHandler = Constellation.prototype.ma;
Constellation.prototype.ia = function (a, b) {
    var c = this.h._mouse;
    c && 300 > (new Date).getTime() - c.timestamp && jQuery(this).trigger("edgeclick", b.id)
};
Constellation.prototype.edgeclickHandler = Constellation.prototype.ia;
Constellation.prototype.va = function (a) {
    var b = this.h._mouse;
    b && (b.f = a);
    b && 300 > (new Date).getTime() - b.timestamp && jQuery(this).trigger("backgroundclick");
    z(this);
    delete this.h._mouse;
    this.b == b && (this.b = this.m);
    this.m == b && (this.m = l);
    jQuery(this).trigger("mouseup")
};

function z(a) {
    var b = a.b,
        c = a.m;
    if (b) {
        if (c) {
            var d = a.ga(c.x, c.y) - a.ga(b.x, b.y),
                e = a.ha(c.x, c.y) - a.ha(b.x, b.y),
                f = Math.sqrt(d * d + e * e),
                g = a.t(c.f.pageX) - a.t(b.f.pageX),
                i = a.u(0, c.f.pageY) - a.u(0, b.f.pageY),
                c = Math.sqrt(g * g + i * i),
                d = Math.atan2(i, g) - Math.atan2(e, d);
            d > Math.PI && (d -= 2 * Math.PI);
            d < -Math.PI && (d = 2 * Math.PI + d);
            a.j = a.j * c / f;
            a.rotation += d
        }
        a.v = a.v + a.ga(b.x, b.y) - a.t(b.f.pageX);
        a.w = a.w + a.ha(b.x, b.y) - a.u(0, b.f.pageY);
        y(a)
    }
}
Constellation.prototype.ab = function () {
    var a = [],
        b;
    for (b in this.h) {
        var c = this.h[b];
        c.K && a.push({
            node: c.K,
            nodeOffsetX: c.da,
            nodeOffsetY: c.ea,
            pageX: c.f.pageX,
            pageY: c.f.pageY
        })
    }
    return a
};
Constellation.prototype.getDraggingNodeMetadata = Constellation.prototype.ab;
Constellation.prototype.g = function (a, b, c, d, e) {
    var f, g;
    if (d && void 0 !== d[c]) return d[c];
    if (b && 0 < b.length) for (d = this.fa.length; 0 < d; d--) {
        g = this.fa[d - 1];
        f = g[0];
        var i = jQuery.inArray(".", f),
            j = 0 > i ? f : f.substr(0, i);
        if (!("" != j && j != a)) {
            i = 0 > i ? [] : f.substr(i + 1).split(".");
            j = k;
            for (f = 0; f < i.length; f++) if (0 > jQuery.inArray(i[f], b)) {
                j = n;
                break
            }
            if (j && void 0 !== g[1][c]) return g[1][c]
        }
    }
    for (d = this.fa.length; 0 < d; d--) if ((g = this.fa[d - 1]) && 1 < g.length && g[0] == a && void 0 !== g[1][c]) return g[1][c];
    return e ? e[c] : void 0
};
Constellation.prototype.getStyle = Constellation.prototype.g;
Constellation.prototype.debug = function (a) {
    jQuery(this).trigger("log", ["debug"].concat(Array.prototype.slice.call(arguments)))
};
Constellation.prototype.debug = Constellation.prototype.debug;
Constellation.prototype.warn = function (a) {
    jQuery(this).trigger("log", ["warn"].concat(Array.prototype.slice.call(arguments)))
};
Constellation.prototype.warn = Constellation.prototype.warn;
Constellation.prototype.error = function (a) {
    jQuery(this).trigger("log", ["error"].concat(Array.prototype.slice.call(arguments)))
};
Constellation.prototype.error = Constellation.prototype.error;